--[[
  collect RST stats from netgear r7000p, dumping them into influxdb

  requires:
    http
    xmlua   (requires luajit)
    inspect (optional)

  run this under cron or what-have-ye
]]

import "xmlua" as xmlua
import "http.request" as request
import "inspect" as inspect

router_ip = os.getenv "ROUTER_ADDR"
router_auth = os.getenv "ROUTER_AUTH"
influx_addr = os.getenv "INFLUXDB_ADDR"
influx_user = os.getenv "INFLUXDB_USER"
influx_pwd = os.getenv "INFLUXDB_PASSWORD"
-- create this beforehand, eg `create database blahblah` via influxdb cli
influx_db = os.getenv "INFLUXDB_DB"

type_map =
  * "Port"
  * "Status"
  * "TxPkts"
  * "RxPkts"
  * "Collisions"
  * "TxBs"
  * "RxBs"
  * "Uptime"

meter_map =
  * false -- "Period", don't want this
  * false -- "ConnectionTime", don't want this
  * "Upload"
  * "Download"
  * "Total"

fetch = (page) ->
  req = with request.new_from_uri "http://#{ router_ip }/#{ page }"
    .headers\upsert ":method", "GET"
    .headers\append "User-Agent", "r7000p-export"
    .headers\append "Authorization", "Basic #{ router_auth }"
    .headers\append "Referer", "http://#{ router_ip }/#{ page }"

  rhead, rstream = req\go 10 -- timeout
  unless rhead
    error "no headers from request(#{ page }): #{ rstream }"

  b, err = rstream\get_body_as_string!
  unless b
    error "no body!"
  if err
    error "#{ b }, error: #{ err }"

  b

write_influx = (point) ->
  req = with request.new_from_uri "http://#{ influx_addr }/write?db=#{ influx_db }"
    .headers\upsert ":method", "POST"
    .headers\append "User-Agent", "r7000p-export"
    .headers\append "Authorization", "Token: #{ influx_user }:#{ influx_pwd }"

  req\set_body point

  print "#{ os.time! } write #{ point }"
  rhead, _ = req\go 30
  rhead != nil

-- not sure this is always necessary, _but_:
--   - the router detects multiple logins
--   - it seems to 'start' a new session by you hitting `/`
--   - if you browse to that, it'll say "do you want to log the other one out?"
--
-- in other words, it's weird, and this is how i keep the "session active"
fetch ""

print "#{ os.time! } fetch RST stats"
body = fetch "RST_stattbl.htm"
doc = xmlua.HTML.parse body

-- get iface stats
per_iface = {}
for i, v in ipairs doc\search "/html/body/table/tr/td/table/tr"
  unless i > 1
    continue

  iface = ""
  for ii, vv in ipairs v\search "td/span"
    unless vv
      continue

    typ = type_map[ii]
    if typ == type_map[1]
      iface = vv\content!
      switch iface
        when "5G WLAN a/n/ac"
          iface = "5gWLAN"
        when "2.4G WLAN b/g/n"
          iface = "2gWLAN"
        else
          iface = iface
      per_iface[iface] = {}

    per_iface[iface]["#{ typ }"] = vv\content!

for k, v in pairs per_iface
  if v.Status == "Link Down"
    continue

  for kk, vv in pairs v
    if kk == "Uptime" or kk == "Port"
      continue

    write_influx "#{ kk },iface=#{ k } value=#{ vv }"

-- fetch today's stats; don't care about previous dates!
print "#{ os.time! } fetch traffic"
body = fetch "traffic_meter.htm"
doc = xmlua.HTML.parse body

for i, v in ipairs doc\root!\search "/html/body/div/form/table/tr[2]/td/div/table/tr[26]/td/table/tr[3]/*"
  k = meter_map[i]
  unless k
    continue

  c = (v\content!)\gsub "^%s*(.-)%s*$", "%1"
  write_influx "traffic,type=#{ k } value=#{ c }"

