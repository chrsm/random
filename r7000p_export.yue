--[[
  collect RST stats from netgear r7000p, dumping them into influxdb

  requires:
    http
    xmlua   (requires luajit)
    inspect (optional)

  run this under cron or what-have-ye
]]

import "xmlua" as xmlua
import "http.request" as request
import "inspect" as inspect

router_ip = os.getenv "ROUTER_ADDR"
router_auth = os.getenv "ROUTER_AUTH"
influx_addr = os.getenv "INFLUXDB_ADDR"
influx_user = os.getenv "INFLUXDB_USER"
influx_pwd = os.getenv "INFLUXDB_PASSWORD"
-- create this beforehand, eg `create database blahblah` via influxdb cli
influx_db = "your-choice"

-- not sure this is always necessary, _but_:
--   - the router detects multiple logins
--   - it seems to 'start' a new session by you hitting `/`
--   - if you browse to that, it'll say "do you want to log the other one out?"
--
-- in other words, it's weird, and this is how i keep the "session active"
with request.new_from_uri "http://#{ router_ip }/"
  .headers\upsert ":method", "GET"
  .headers\append "User-Agent", "r7000p-export"
  .headers\append "Authorization", "Basic #{ router_auth }"
  \go 10

req = with request.new_from_uri "http://#{ router_ip }/RST_stattbl.htm"
  .headers\upsert ":method", "GET"
  .headers\append "User-Agent", "r7000p-export"
  .headers\append "Authorization", "Basic #{ router_auth }"
  .headers\append "Referer", "http://#{ router_ip }/RST_interval.htm"

rhead, rstream = req\go 10 -- timeout
unless rhead
  error "no headers from request: #{ rstream }"

for k, v in rhead\each!
  print "header #{ k }: #{ v }"

b, err = rstream\get_body_as_string!
unless b
  error "no body!"
if err
  error "error: #{ err }"

doc = xmlua.HTML.parse b

type_map =
  * "Port"
  * "Status"
  * "TxPkts"
  * "RxPkts"
  * "Collisions"
  * "TxBs"
  * "RxBs"
  * "Uptime"

per_iface = {}
for i, v in ipairs doc\search "/html/body/table/tr/td/table/tr"
  unless i > 1
    continue

  iface = ""
  for ii, vv in ipairs v\search "td/span"
    unless vv
      continue

    if ii == 1
      iface = vv\content!
      switch iface
        when "5G WLAN a/n/ac"
          iface = "5gWLAN"
        when "2.4G WLAN b/g/n"
          iface = "2gWLAN"
        else
          iface = iface
      per_iface[iface] = { "#{ type_map[1] }": iface }

    per_iface[iface]["#{ type_map[ii] }"] = vv\content!

-- as influx strings
-- note that it'd probably just be easier to do this above,
-- but i was exploring the data and testing as i wrote it
-- #dealwithit
for k, v in pairs per_iface
  if v.Status == "Link Down"
    continue

  print inspect v
  for kk, vv in pairs v
    if kk == "Uptime" or kk == "Port"
      continue

    req = with request.new_from_uri "http://#{ influx_addr }/write?db=#{ influx_db }"
      .headers\upsert ":method", "POST"
      .headers\append "User-Agent", "r7000p-export"
      .headers\append "Authorization", "Token: #{ influx_user }:#{ influx_pwd }"

    pt = "#{ kk },iface=#{ k } value=#{ vv }"
    print pt
    req\set_body pt

    rhead, rstream = req\go 10

